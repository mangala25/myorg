try {
echo "EXECUTING one-click-config"
 node{
  def workspace = env.WORKSPACE
  def sparseDir = 'demo/technology/microservices-pcf/migration/payment-use-case/microservices/pay-bank-beneficiary'
  
  stage('clean-workspace') {
   cleanWs(workspace,sparseDir)
  }
  stage('scm') {        
    getGitLatest(workspace)   
  }
  
  stage('mvn-build') {
      mvnBuild(workspace,sparseDir)        
  }  
  
  stage('mvn-sonar') {
      mvnSonar(workspace,sparseDir)      
  }
  
  stage("Quality-Gate1"){  
   sonarQualityGate1()   
  }
  
  stage('pcf-push'){
      //pcfPUSH1(workspace,sparseDir)      
  } 
  
  stage("Jmeter-p1"){
  executeJmeter(workspace,sparseDir) 
  
  //build job: 'JMeter - Freestyle'
  }
    
 }
}
catch (e){
 echo 'EXCEPTION OCCURED'
        echo "${e}"
}


def cleanWs(workspace,sparseDir) {

 //cleanWs()
   echo "current working directory is : " 
   echo pwd

   echo "workspace directory is ${workspace}"
   echo "${sparseDir}"
   echo  "${sparseDir} >> ${workspace}/.git/info/sparse-checkout"
   //sh 'rm -rf ${workspace}/*'

   sh 'java -version' //working
   sh 'mvn --version' //working

   maven 'mvn clean'
   echo "after maven clean"

}

def getGitLatest(workspace){

      echo "workspace directory is ${workspace}"  
      //def rtGradle = Artifactory.newMavenBuild()
      
      def config = [:]
   
      config.serviceRepo = 'git@ec2-54-84-120-131.compute-1.amazonaws.com:/home/git/ArchitectureTeam.git'
      config.sparseCheckout= 'demo/technology/microservices-pcf/migration/payment-use-case/microservices/pay-bank-beneficiary'
      config.gitBranch = 'master' 
      //config.serviceRepo = 'https://github.com/rbhupesh/techinfo.git'
          //config.gitBranch = 'master'   
   
      echo "check out branch ${config.gitBranch} from ${config.serviceRepo}"                       
      git branch: config.gitBranch, url: config.serviceRepo //working step
}

def mvnBuild(workspace,sparseDir){
      echo "mvn-build"
      echo "workspace directory is ${workspace}"
      echo "${sparseDir}"
      echo '${workspace}/${sparseDir}'
      sh "cd ${workspace}/${sparseDir}"
      //maven 'mvn clean compile test package'
      // Create an Artifactory Maven instance.
      //def rtMaven = Artifactory.newMavenBuild()
      //def buildInfo
      //buildInfo = rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean package'
  
      echo "current working directory is : " 
      sh "pwd"
      sh "mvn -f  ${workspace}/${sparseDir}/pom.xml clean compile package"
      }
      
  def mvnSonar(workspace,sparseDir){
      echo "mvn-sonar"      
      //sh "printenv"
      //echo "after printENV"
   
      withSonarQubeEnv("localSonarQube") {
                      sh "mvn -f  ${workspace}/${sparseDir}/pom.xml sonar:sonar"// running locally
      }
      }
      
  def sonarQualityGate1(){
   timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
      def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
       if (qg.status != 'OK') {
          error "Pipeline aborted due to quality gate failure: ${qg.status}"
       }
   }
   }
   
 def pcfPUSH1(workspace,sparseDir){
      echo 'pcf-push'
  
      sh "cd ${workspace}/${sparseDir}/"
      sh "cf login -a https://api.run.pivotal.io -u bhupesh.rathod@altimetrik.com -p Alti@123"
      sh "cf push -f ${workspace}/${sparseDir}/manifest.yml -t 179" 
  }
  
  def executeJmeter(workspace,sparseDir){
  sh "cd ${workspace}/${sparseDir}/src/test/jmeter"
  sh "ls -l"
  sh "/home/rbhupesh/my-root/programs/apache-jmeter-4.0/bin/jmeter  -n -t ${workspace}/${sparseDir}/src/test/jmeter/Jmeter101.jmx"
  // -Jjmeter.save.saveservice.output_format=xml
  }
